{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/anthonykwok/Documents/GitHub/github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nexport function driver(style, styletron) {\n  var tx = renderDeclarativeRules(style, styletron);\n  return styletron.renderStyle(tx);\n}\nexport function getInitialStyle() {\n  return {};\n}\nexport function renderDeclarativeRules(style, styletron) {\n  for (var key in style) {\n    var val = style[key];\n    if (key === \"animationName\" && typeof val !== \"string\") {\n      style.animationName = styletron.renderKeyframes(val);\n      continue;\n    }\n    if (key === \"fontFamily\" && typeof val !== \"string\") {\n      if (Array.isArray(val)) {\n        var result = \"\";\n        var _iterator = _createForOfIteratorHelper(val),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var font = _step.value;\n            if (typeof font === \"object\") {\n              result += \"\".concat(styletron.renderFontFace(font), \",\");\n            } else if (typeof font === \"string\") {\n              result += \"\".concat(font, \",\");\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        style.fontFamily = result.slice(0, -1);\n        continue;\n      } else if (val === void 0) {\n        continue;\n      } else {\n        style.fontFamily = styletron.renderFontFace(val);\n        continue;\n      }\n    }\n    if (typeof val === \"object\" && val !== null) {\n      renderDeclarativeRules(val, styletron);\n    }\n  }\n  return style;\n}","map":{"version":3,"sources":["src/index.ts"],"names":["driver","style","styletron","tx","renderDeclarativeRules","renderStyle","getInitialStyle","key","val","animationName","renderKeyframes","Array","isArray","result","font","renderFontFace","fontFamily","slice"],"mappings":";AAkBA,OAAO,SAASA,MAAT,CAAgBC,KAAhB,EAAoCC,SAApC,EAAuE;EAC5E,IAAMC,EAAE,GAAGC,sBAAsB,CAACH,KAAD,EAAQC,SAAR,CAAjC;EACA,OAAOA,SAAS,CAACG,WAAVH,CAAsBC,EAAtBD,CAAP;AACD;AAED,OAAO,SAASI,eAAT,CAAA,EAAwC;EAC7C,OAAO,CAAA,CAAP;AACD;AAED,OAAO,SAASF,sBAAT,CACLH,KADK,EAELC,SAFK,EAGL;EACA,KAAK,IAAMK,GAAX,IAAkBN,KAAlB,EAAyB;IACvB,IAAMO,GAAG,GAAGP,KAAK,CAACM,GAAD,CAAjB;IACA,IAAIA,GAAG,KAAK,eAARA,IAA2B,OAAOC,GAAP,KAAe,QAA9C,EAAwD;MACtDP,KAAK,CAACQ,aAANR,GAAsBC,SAAS,CAACQ,eAAVR,CAA0BM,GAA1BN,CAAtBD;MACA;IACD;IACD,IAAIM,GAAG,KAAK,YAARA,IAAwB,OAAOC,GAAP,KAAe,QAA3C,EAAqD;MACnD,IAAIG,KAAK,CAACC,OAAND,CAAcH,GAAdG,CAAJ,EAAwB;QACtB,IAAIE,MAAM,GAAG,EAAb;QAAA,IAAA,SAAA,GAAA,0BAAA,CACmBL,GAAnB;UAAA,KAAA;QAAA;UAAA,KAAA,SAAA,CAAA,CAAA,MAAA,KAAA,GAAA,SAAA,CAAA,CAAA,IAAA,IAAA,GAAwB;YAAA,IAAbM,IAAX,GAAA,KAAA,CAAA,KAAA;YACE,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;cAC5BD,MAAM,OAAA,MAAA,CAAOX,SAAS,CAACa,cAAVb,CAAyBY,IAAzBZ,CAAsC,MAAnDW;YACD,CAFD,MAEO,IAAI,OAAOC,IAAP,KAAgB,QAApB,EAA8B;cACnCD,MAAM,OAAA,MAAA,CAAOC,IAAK,MAAlBD;YACD;UACF;QAAA,SAAA,GAAA;UAAA,SAAA,CAAA,CAAA,CAAA,GAAA;QAAA;UAAA,SAAA,CAAA,CAAA;QAAA;QACDZ,KAAK,CAACe,UAANf,GAAmBY,MAAM,CAACI,KAAPJ,CAAa,CAAbA,EAAgB,CAAC,CAAjBA,CAAnBZ;QACA;MACD,CAXD,MAWO,IAAIO,GAAG,KAAK,KAAK,CAAjB,EAAoB;QACzB;MACD,CAFM,MAEA;QACLP,KAAK,CAACe,UAANf,GAAmBC,SAAS,CAACa,cAAVb,CAAyBM,GAAzBN,CAAnBD;QACA;MACD;IACF;IACD,IAAI,OAAOO,GAAP,KAAe,QAAf,IAA2BA,GAAG,KAAK,IAAvC,EAA6C;MAC3CJ,sBAAsB,CAACI,GAAD,EAAqBN,SAArB,CAAtBE;IACD;EACF;EACD,OAAOH,KAAP;AACD","sourcesContent":["import type {\n  Properties,\n  FontFace as FontFaceObject,\n  KeyframesObject,\n} from \"./style-types\";\n\nexport type {FontFaceObject, KeyframesObject};\n\nexport type StyleObject = Properties & {\n  [key in string]: Properties[keyof Properties] | StyleObject;\n};\n\nexport interface StandardEngine {\n  renderStyle(style: StyleObject): string;\n  renderKeyframes(keyframes: KeyframesObject): string;\n  renderFontFace(fontFace: FontFaceObject): string;\n}\n\nexport function driver(style: StyleObject, styletron: StandardEngine): string {\n  const tx = renderDeclarativeRules(style, styletron);\n  return styletron.renderStyle(tx);\n}\n\nexport function getInitialStyle(): StyleObject {\n  return {};\n}\n\nexport function renderDeclarativeRules(\n  style: StyleObject,\n  styletron: StandardEngine,\n) {\n  for (const key in style) {\n    const val = style[key];\n    if (key === \"animationName\" && typeof val !== \"string\") {\n      style.animationName = styletron.renderKeyframes(val as any);\n      continue;\n    }\n    if (key === \"fontFamily\" && typeof val !== \"string\") {\n      if (Array.isArray(val)) {\n        let result = \"\";\n        for (const font of val) {\n          if (typeof font === \"object\") {\n            result += `${styletron.renderFontFace(font as any)},`;\n          } else if (typeof font === \"string\") {\n            result += `${font},`;\n          }\n        }\n        style.fontFamily = result.slice(0, -1);\n        continue;\n      } else if (val === void 0) {\n        continue;\n      } else {\n        style.fontFamily = styletron.renderFontFace(val as any);\n        continue;\n      }\n    }\n    if (typeof val === \"object\" && val !== null) {\n      renderDeclarativeRules(val as StyleObject, styletron);\n    }\n  }\n  return style;\n}\n"]},"metadata":{},"sourceType":"module"}