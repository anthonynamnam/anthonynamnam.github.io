{"ast":null,"code":"import _classCallCheck from \"/Users/anthonykwok/Documents/GitHub/github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anthonykwok/Documents/GitHub/github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar SequentialIDGenerator = /*#__PURE__*/function () {\n  function SequentialIDGenerator() {\n    var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    _classCallCheck(this, SequentialIDGenerator);\n    // ensure start with \"ae\" so \"ad\" is never produced\n    this.prefix = prefix;\n    this.count = 0;\n    this.offset = 374;\n    this.msb = 1295;\n    this.power = 2;\n  }\n  _createClass(SequentialIDGenerator, [{\n    key: \"next\",\n    value: function next() {\n      var id = this.increment().toString(36);\n      return this.prefix ? \"\".concat(this.prefix).concat(id) : id;\n    }\n  }, {\n    key: \"increment\",\n    value: function increment() {\n      var id = this.count + this.offset;\n      if (id === this.msb) {\n        this.offset += (this.msb + 1) * 9;\n        this.msb = Math.pow(36, ++this.power) - 1;\n      }\n      this.count++;\n      return id;\n    }\n  }]);\n  return SequentialIDGenerator;\n}();\nexport { SequentialIDGenerator as default };","map":{"version":3,"sources":["src/sequential-id-generator.ts"],"names":["SequentialIDGenerator","constructor","prefix","count","offset","msb","power","next","id","increment","toString","Math","pow"],"mappings":";;IAAqBA,qBAAN;EAObC,SAAAA,sBAAAA,EAAiC;IAAA,IAArBC,MAAc,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,EAAlB;IAAA,eAAA,OAAA,qBAAA;IACT;IACA,IAAA,CAAKA,MAAL,GAAcA,MAAd;IACA,IAAA,CAAKC,KAAL,GAAa,CAAb;IACA,IAAA,CAAKC,MAAL,GAAc,GAAd;IACA,IAAA,CAAKC,GAAL,GAAW,IAAX;IACA,IAAA,CAAKC,KAAL,GAAa,CAAb;EACD;EAAA,YAAA,CAAA,qBAAA;IAAA,GAAA;IAAA,KAAA,EAEDC,SAAAA,KAAAA,EAAO;MACL,IAAMC,EAAE,GAAG,IAAA,CAAKC,SAAL,CAAA,CAAA,CAAiBC,QAAjB,CAA0B,EAA1B,CAAX;MACA,OAAO,IAAA,CAAKR,MAAL,MAAA,MAAA,CAAiB,IAAA,CAAKA,MAAO,EAAA,MAAA,CAAEM,EAA/B,IAAsCA,EAA7C;IACD;EAAA;IAAA,GAAA;IAAA,KAAA,EAEDC,SAAAA,UAAAA,EAAY;MACV,IAAMD,EAAE,GAAG,IAAA,CAAKL,KAAL,GAAa,IAAA,CAAKC,MAA7B;MACA,IAAII,EAAE,KAAK,IAAA,CAAKH,GAAhB,EAAqB;QACnB,IAAA,CAAKD,MAAL,IAAe,CAAC,IAAA,CAAKC,GAAL,GAAW,CAAZ,IAAiB,CAAhC;QACA,IAAA,CAAKA,GAAL,GAAWM,IAAI,CAACC,GAALD,CAAS,EAATA,EAAa,EAAE,IAAA,CAAKL,KAApBK,CAAAA,GAA6B,CAAxC;MACD;MACD,IAAA,CAAKR,KAAL,EAAA;MACA,OAAOK,EAAP;IACD;EAAA;EAAA,OAAA,qBAAA;AAAA;AAAA,SA7BkBR,qBAAN,IAAA,OAAA","sourcesContent":["export default class SequentialIDGenerator {\n  prefix: string;\n  count: number;\n  offset: number;\n  msb: number;\n  power: number;\n\n  constructor(prefix: string = \"\") {\n    // ensure start with \"ae\" so \"ad\" is never produced\n    this.prefix = prefix;\n    this.count = 0;\n    this.offset = 374;\n    this.msb = 1295;\n    this.power = 2;\n  }\n\n  next() {\n    const id = this.increment().toString(36);\n    return this.prefix ? `${this.prefix}${id}` : id;\n  }\n\n  increment() {\n    const id = this.count + this.offset;\n    if (id === this.msb) {\n      this.offset += (this.msb + 1) * 9;\n      this.msb = Math.pow(36, ++this.power) - 1;\n    }\n    this.count++;\n    return id;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}