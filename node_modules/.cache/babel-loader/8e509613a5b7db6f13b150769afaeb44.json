{"ast":null,"code":"import _objectSpread from \"/Users/anthonykwok/Documents/GitHub/anthonynamnam.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/anthonykwok/Documents/GitHub/anthonynamnam.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"/Users/anthonykwok/Documents/GitHub/anthonynamnam.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/anthonykwok/Documents/GitHub/anthonynamnam.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anthonykwok/Documents/GitHub/anthonynamnam.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar _excluded = [\"class\"];\nimport SequentialIDGenerator from \"../sequential-id-generator\";\nimport { Cache, MultiCache } from \"../cache\";\nimport injectStylePrefixed from \"../inject-style-prefixed\";\nimport { styleBlockToRule, atomicSelector, keyframesBlockToRule, declarationsToBlock, keyframesToBlock, fontFaceBlockToRule } from \"../css\";\nvar StyletronServer = /*#__PURE__*/function () {\n  function StyletronServer() {\n    var _this = this;\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, StyletronServer);\n    this.styleRules = {\n      \"\": \"\"\n    };\n    this.styleCache = new MultiCache(new SequentialIDGenerator(opts.prefix), function (media) {\n      _this.styleRules[media] = \"\";\n    }, function (cache, id, value) {\n      var pseudo = value.pseudo,\n        block = value.block;\n      _this.styleRules[cache.key] += styleBlockToRule(atomicSelector(id, pseudo), block);\n    });\n    this.fontFaceRules = \"\";\n    this.fontFaceCache = new Cache(new SequentialIDGenerator(opts.prefix), function (cache, id, value) {\n      _this.fontFaceRules += fontFaceBlockToRule(id, declarationsToBlock(value));\n    });\n    this.keyframesRules = \"\";\n    this.keyframesCache = new Cache(new SequentialIDGenerator(opts.prefix), function (cache, id, value) {\n      _this.keyframesRules += keyframesBlockToRule(id, keyframesToBlock(value));\n    });\n  }\n  _createClass(StyletronServer, [{\n    key: \"renderStyle\",\n    value: function renderStyle(style) {\n      return injectStylePrefixed(this.styleCache, style, \"\", \"\");\n    }\n  }, {\n    key: \"renderFontFace\",\n    value: function renderFontFace(fontFace) {\n      var key = JSON.stringify(fontFace);\n      return this.fontFaceCache.addValue(key, fontFace);\n    }\n  }, {\n    key: \"renderKeyframes\",\n    value: function renderKeyframes(keyframes) {\n      var key = JSON.stringify(keyframes);\n      return this.keyframesCache.addValue(key, keyframes);\n    }\n  }, {\n    key: \"getStylesheets\",\n    value: function getStylesheets() {\n      return [].concat(_toConsumableArray(this.keyframesRules.length ? [{\n        css: this.keyframesRules,\n        attrs: {\n          \"data-hydrate\": \"keyframes\"\n        }\n      }] : []), _toConsumableArray(this.fontFaceRules.length ? [{\n        css: this.fontFaceRules,\n        attrs: {\n          \"data-hydrate\": \"font-face\"\n        }\n      }] : []), _toConsumableArray(sheetify(this.styleRules, this.styleCache.getSortedCacheKeys())));\n    }\n  }, {\n    key: \"getStylesheetsHtml\",\n    value: function getStylesheetsHtml() {\n      var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"_styletron_hydrate_\";\n      return generateHtmlString(this.getStylesheets(), className);\n    }\n  }, {\n    key: \"getCss\",\n    value: function getCss() {\n      return this.keyframesRules + this.fontFaceRules + stringify(this.styleRules, this.styleCache.getSortedCacheKeys());\n    }\n  }]);\n  return StyletronServer;\n}();\nexport function generateHtmlString(sheets, className) {\n  var html = \"\";\n  for (var i = 0; i < sheets.length; i++) {\n    var sheet = sheets[i];\n    var _sheet$attrs = sheet.attrs,\n      originalClassName = _sheet$attrs.class,\n      rest = _objectWithoutProperties(_sheet$attrs, _excluded);\n    var attrs = _objectSpread({\n      class: originalClassName ? \"\".concat(className, \" \").concat(originalClassName) : className\n    }, rest);\n    html += \"<style\".concat(attrsToString(attrs), \">\").concat(sheet.css, \"</style>\");\n  }\n  return html;\n}\nfunction attrsToString(attrs) {\n  var result = \"\";\n  for (var attr in attrs) {\n    var value = attrs[attr];\n    if (value === true) {\n      result += \" \" + attr;\n    } else if (value !== false) {\n      result += \" \".concat(attr, \"=\\\"\").concat(value, \"\\\"\");\n    }\n  }\n  return result;\n}\nfunction stringify(styleRules, sortedCacheKeys) {\n  var result = \"\";\n  sortedCacheKeys.forEach(function (cacheKey) {\n    var rules = styleRules[cacheKey];\n    if (cacheKey !== \"\") {\n      result += \"@media \".concat(cacheKey, \"{\").concat(rules, \"}\");\n    } else {\n      result += rules;\n    }\n  });\n  return result;\n}\nfunction sheetify(styleRules, sortedCacheKeys) {\n  if (sortedCacheKeys.length === 0) {\n    return [{\n      css: \"\",\n      attrs: {}\n    }];\n  }\n  var sheets = [];\n  sortedCacheKeys.forEach(function (cacheKey) {\n    // omit media (cacheKey) attribute if empty\n    var attrs = cacheKey === \"\" ? {} : {\n      media: cacheKey\n    };\n    sheets.push({\n      css: styleRules[cacheKey],\n      attrs: attrs\n    });\n  });\n  return sheets;\n}\nexport default StyletronServer;","map":{"version":3,"sources":["src/server/server.ts"],"names":["SequentialIDGenerator","Cache","MultiCache","injectStylePrefixed","styleBlockToRule","atomicSelector","keyframesBlockToRule","declarationsToBlock","keyframesToBlock","fontFaceBlockToRule","StyletronServer","constructor","opts","styleRules","styleCache","prefix","media","cache","id","value","pseudo","block","key","fontFaceRules","fontFaceCache","keyframesRules","keyframesCache","renderStyle","style","renderFontFace","fontFace","JSON","stringify","addValue","renderKeyframes","keyframes","getStylesheets","length","css","attrs","sheetify","getSortedCacheKeys","getStylesheetsHtml","className","generateHtmlString","getCss","sheets","html","i","sheet","class","originalClassName","rest","attrsToString","result","attr","sortedCacheKeys","forEach","cacheKey","rules","push"],"mappings":";;;;;;AAAA,OAAOA,qBAAP,MAAkC,4BAAlC;AAIA,SAAQC,KAAR,EAAeC,UAAf,QAAgC,UAAhC;AAEA,OAAOC,mBAAP,MAAgC,0BAAhC;AAQA,SACEC,gBADF,EAEEC,cAFF,EAGEC,oBAHF,EAIEC,mBAJF,EAKEC,gBALF,EAMEC,mBANF,QAOO,QAPP;AAAA,IAwBMC,eAAN;EAaEC,SAAAA,gBAAAA,EAAiC;IAAA,IAAA,KAAA;IAAA,IAArBC,IAAc,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,CAAA,CAAlB;IAAA,eAAA,OAAA,eAAA;IACT,IAAA,CAAKC,UAAL,GAAkB;MAAC,EAAA,EAAI;IAAL,CAAlB;IACA,IAAA,CAAKC,UAAL,GAAkB,IAAIZ,UAAJ,CAChB,IAAIF,qBAAJ,CAA0BY,IAAI,CAACG,MAA/B,CADgB,EAEhBC,UAAAA,KAAK,EAAI;MACP,KAAA,CAAKH,UAAL,CAAgBG,KAAhB,CAAA,GAAyB,EAAzB;IACD,CAJe,EAKhB,UAACC,KAAD,EAAQC,EAAR,EAAYC,KAAZ,EAAsB;MACpB,IAAOC,MAAD,GAAkBD,KAAxB,CAAOC,MAAD;QAASC,KAAAA,GAASF,KAAxB,CAAeE,KAAAA;MACf,KAAA,CAAKR,UAAL,CAAgBI,KAAK,CAACK,GAAtB,CAAA,IAA8BlB,gBAAgB,CAC5CC,cAAc,CAACa,EAAD,EAAKE,MAAL,CAD8B,EAE5CC,KAF4C,CAA9C;IAID,CAXe,CAAlB;IAcA,IAAA,CAAKE,aAAL,GAAqB,EAArB;IACA,IAAA,CAAKC,aAAL,GAAqB,IAAIvB,KAAJ,CACnB,IAAID,qBAAJ,CAA0BY,IAAI,CAACG,MAA/B,CADmB,EAEnB,UAACE,KAAD,EAAQC,EAAR,EAAYC,KAAZ,EAAsB;MACpB,KAAA,CAAKI,aAAL,IAAsBd,mBAAmB,CACvCS,EADuC,EAEvCX,mBAAmB,CAACY,KAAD,CAFoB,CAAzC;IAID,CAPkB,CAArB;IAUA,IAAA,CAAKM,cAAL,GAAsB,EAAtB;IACA,IAAA,CAAKC,cAAL,GAAsB,IAAIzB,KAAJ,CACpB,IAAID,qBAAJ,CAA0BY,IAAI,CAACG,MAA/B,CADoB,EAEpB,UAACE,KAAD,EAAQC,EAAR,EAAYC,KAAZ,EAAsB;MACpB,KAAA,CAAKM,cAAL,IAAuBnB,oBAAoB,CACzCY,EADyC,EAEzCV,gBAAgB,CAACW,KAAD,CAFyB,CAA3C;IAID,CAPmB,CAAtB;EASD;EAAA,YAAA,CAAA,eAAA;IAAA,GAAA;IAAA,KAAA,EAEDQ,SAAAA,YAAYC,KAAD,EAA6B;MACtC,OAAOzB,mBAAmB,CAAC,IAAA,CAAKW,UAAN,EAAkBc,KAAlB,EAAyB,EAAzB,EAA6B,EAA7B,CAA1B;IACD;EAAA;IAAA,GAAA;IAAA,KAAA,EAEDC,SAAAA,eAAeC,QAAD,EAAmC;MAC/C,IAAMR,GAAG,GAAGS,IAAI,CAACC,SAALD,CAAeD,QAAfC,CAAZ;MACA,OAAO,IAAA,CAAKP,aAAL,CAAmBS,QAAnB,CAA4BX,GAA5B,EAAiCQ,QAAjC,CAAP;IACD;EAAA;IAAA,GAAA;IAAA,KAAA,EAEDI,SAAAA,gBAAgBC,SAAD,EAAqC;MAClD,IAAMb,GAAG,GAAGS,IAAI,CAACC,SAALD,CAAeI,SAAfJ,CAAZ;MACA,OAAO,IAAA,CAAKL,cAAL,CAAoBO,QAApB,CAA6BX,GAA7B,EAAkCa,SAAlC,CAAP;IACD;EAAA;IAAA,GAAA;IAAA,KAAA,EAEDC,SAAAA,eAAAA,EAAgC;MAC9B,UAAA,MAAA,CAAA,kBAAA,CACM,IAAA,CAAKX,cAAL,CAAoBY,MAApB,GACA,CACE;QACEC,GAAG,EAAE,IAAA,CAAKb,cADZ;QAEEc,KAAK,EAAE;UAAC,cAAA,EAAgB;QAAjB;MAFT,CADF,CADA,GAOA,EARC,GAAA,kBAAA,CASD,IAAA,CAAKhB,aAAL,CAAmBc,MAAnB,GACA,CACE;QACEC,GAAG,EAAE,IAAA,CAAKf,aADZ;QAEEgB,KAAK,EAAE;UAAC,cAAA,EAAgB;QAAjB;MAFT,CADF,CADA,GAOA,EAhBC,GAAA,kBAAA,CAiBFC,QAAQ,CAAC,IAAA,CAAK3B,UAAN,EAAkB,IAAA,CAAKC,UAAL,CAAgB2B,kBAAhB,CAAA,CAAlB,CAjBb;IAmBD;EAAA;IAAA,GAAA;IAAA,KAAA,EAEDC,SAAAA,mBAAAA,EAA8D;MAAA,IAA3CC,SAAiB,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,qBAArB;MAChB,OAAOC,kBAAkB,CAAC,IAAA,CAAKR,cAAL,CAAA,CAAD,EAAwBO,SAAxB,CAAzB;IACD;EAAA;IAAA,GAAA;IAAA,KAAA,EAEDE,SAAAA,OAAAA,EAAS;MACP,OACE,IAAA,CAAKpB,cAAL,GACA,IAAA,CAAKF,aADL,GAEAS,SAAS,CAAC,IAAA,CAAKnB,UAAN,EAAkB,IAAA,CAAKC,UAAL,CAAgB2B,kBAAhB,CAAA,CAAlB,CAHX;IAKD;EAAA;EAAA,OAAA,eAAA;AAAA;AAGH,OAAO,SAASG,kBAAT,CAA4BE,MAA5B,EAAmDH,SAAnD,EAAsE;EAC3E,IAAII,IAAI,GAAG,EAAX;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACT,MAA3B,EAAmCW,CAAC,EAApC,EAAwC;IACtC,IAAMC,KAAK,GAAGH,MAAM,CAACE,CAAD,CAApB;IACA,IAAA,YAAA,GAA4CC,KAAK,CAACV,KAAlD;MAAcY,iBAAR,GAAA,YAAA,CAACD,KAAK;MAAwBE,IAAAA,GAAAA,wBAAAA,CAAAA,YAAAA,EAAAA,SAAAA;IACpC,IAAMb,KAAK,GAAA,aAAA;MACTW,KAAK,EAAEC,iBAAiB,MAAA,MAAA,CACjBR,SAAU,OAAA,MAAA,CAAGQ,iBADI,IAEpBR;IAHQ,GAIRS,IAAAA,CAJN;IAMAL,IAAI,aAAA,MAAA,CAAaM,aAAa,CAACd,KAAD,CAAQ,OAAA,MAAA,CAAGU,KAAK,CAACX,GAAI,aAAnDS;EACD;EACD,OAAOA,IAAP;AACD;AAED,SAASM,aAAT,CAAuBd,KAAvB,EAAsC;EACpC,IAAIe,MAAM,GAAG,EAAb;EACA,KAAK,IAAMC,IAAX,IAAmBhB,KAAnB,EAA0B;IACxB,IAAMpB,KAAK,GAAGoB,KAAK,CAACgB,IAAD,CAAnB;IACA,IAAIpC,KAAK,KAAK,IAAd,EAAoB;MAClBmC,MAAM,IAAI,GAAA,GAAMC,IAAhBD;IACD,CAFD,MAEO,IAAInC,KAAK,KAAK,KAAd,EAAqB;MAC1BmC,MAAM,QAAA,MAAA,CAAQC,IAAK,SAAA,MAAA,CAAIpC,KAAM,OAA7BmC;IACD;EACF;EACD,OAAOA,MAAP;AACD;AAED,SAAStB,SAAT,CAAmBnB,UAAnB,EAA+B2C,eAA/B,EAAgD;EAC9C,IAAIF,MAAM,GAAG,EAAb;EACAE,eAAe,CAACC,OAAhBD,CAAwBE,UAAAA,QAAQ,EAAI;IAClC,IAAMC,KAAK,GAAG9C,UAAU,CAAC6C,QAAD,CAAxB;IACA,IAAIA,QAAQ,KAAK,EAAjB,EAAqB;MACnBJ,MAAM,cAAA,MAAA,CAAcI,QAAS,OAAA,MAAA,CAAGC,KAAM,MAAtCL;IACD,CAFD,MAEO;MACLA,MAAM,IAAIK,KAAVL;IACD;EACF,CAPDE,CAAAA;EAQA,OAAOF,MAAP;AACD;AAED,SAASd,QAAT,CAAkB3B,UAAlB,EAA8B2C,eAA9B,EAA8D;EAC5D,IAAIA,eAAe,CAACnB,MAAhBmB,KAA2B,CAA/B,EAAkC;IAChC,OAAO,CAAC;MAAClB,GAAG,EAAE,EAAN;MAAUC,KAAK,EAAE,CAAA;IAAjB,CAAD,CAAP;EACD;EACD,IAAMO,MAAM,GAAG,EAAf;EACAU,eAAe,CAACC,OAAhBD,CAAwBE,UAAAA,QAAQ,EAAI;IAClC;IACA,IAAMnB,KAAK,GAAGmB,QAAQ,KAAK,EAAbA,GAAkB,CAAA,CAAlBA,GAAuB;MAAC1C,KAAK,EAAE0C;IAAR,CAArC;IACAZ,MAAM,CAACc,IAAPd,CAAY;MAACR,GAAG,EAAEzB,UAAU,CAAC6C,QAAD,CAAhB;MAA4BnB,KAAAA,EAAAA;IAA5B,CAAZO,CAAAA;EACD,CAJDU,CAAAA;EAKA,OAAOV,MAAP;AACD;AAED,eAAepC,eAAf","sourcesContent":["import SequentialIDGenerator from \"../sequential-id-generator\";\n\nimport type {StandardEngine} from \"styletron-standard\";\n\nimport {Cache, MultiCache} from \"../cache\";\n\nimport injectStylePrefixed from \"../inject-style-prefixed\";\n\nimport type {\n  StyleObject,\n  FontFaceObject,\n  KeyframesObject,\n} from \"styletron-standard\";\n\nimport {\n  styleBlockToRule,\n  atomicSelector,\n  keyframesBlockToRule,\n  declarationsToBlock,\n  keyframesToBlock,\n  fontFaceBlockToRule,\n} from \"../css\";\n\nexport type attrsT = {\n  \"data-hydrate\"?: \"keyframes\" | \"font-face\";\n  media?: string;\n  class?: string;\n};\n\nexport type sheetT = {\n  css: string;\n  attrs: attrsT;\n};\n\ntype optionsT = {\n  prefix?: string;\n};\n\nclass StyletronServer implements StandardEngine {\n  styleCache: MultiCache<{\n    pseudo: string;\n    block: string;\n  }>;\n  keyframesCache: Cache<KeyframesObject>;\n  fontFaceCache: Cache<FontFaceObject>;\n  styleRules: {\n    [x: string]: string;\n  };\n  keyframesRules: string;\n  fontFaceRules: string;\n\n  constructor(opts: optionsT = {}) {\n    this.styleRules = {\"\": \"\"};\n    this.styleCache = new MultiCache(\n      new SequentialIDGenerator(opts.prefix),\n      media => {\n        this.styleRules[media] = \"\";\n      },\n      (cache, id, value) => {\n        const {pseudo, block} = value;\n        this.styleRules[cache.key] += styleBlockToRule(\n          atomicSelector(id, pseudo),\n          block,\n        );\n      },\n    );\n\n    this.fontFaceRules = \"\";\n    this.fontFaceCache = new Cache(\n      new SequentialIDGenerator(opts.prefix),\n      (cache, id, value) => {\n        this.fontFaceRules += fontFaceBlockToRule(\n          id,\n          declarationsToBlock(value),\n        );\n      },\n    );\n\n    this.keyframesRules = \"\";\n    this.keyframesCache = new Cache(\n      new SequentialIDGenerator(opts.prefix),\n      (cache, id, value) => {\n        this.keyframesRules += keyframesBlockToRule(\n          id,\n          keyframesToBlock(value),\n        );\n      },\n    );\n  }\n\n  renderStyle(style: StyleObject): string {\n    return injectStylePrefixed(this.styleCache, style, \"\", \"\");\n  }\n\n  renderFontFace(fontFace: FontFaceObject): string {\n    const key = JSON.stringify(fontFace);\n    return this.fontFaceCache.addValue(key, fontFace);\n  }\n\n  renderKeyframes(keyframes: KeyframesObject): string {\n    const key = JSON.stringify(keyframes);\n    return this.keyframesCache.addValue(key, keyframes);\n  }\n\n  getStylesheets(): Array<sheetT> {\n    return [\n      ...(this.keyframesRules.length\n        ? [\n            {\n              css: this.keyframesRules,\n              attrs: {\"data-hydrate\": \"keyframes\"},\n            } as sheetT,\n          ]\n        : []),\n      ...(this.fontFaceRules.length\n        ? [\n            {\n              css: this.fontFaceRules,\n              attrs: {\"data-hydrate\": \"font-face\"},\n            } as sheetT,\n          ]\n        : []),\n      ...sheetify(this.styleRules, this.styleCache.getSortedCacheKeys()),\n    ];\n  }\n\n  getStylesheetsHtml(className: string = \"_styletron_hydrate_\") {\n    return generateHtmlString(this.getStylesheets(), className);\n  }\n\n  getCss() {\n    return (\n      this.keyframesRules +\n      this.fontFaceRules +\n      stringify(this.styleRules, this.styleCache.getSortedCacheKeys())\n    );\n  }\n}\n\nexport function generateHtmlString(sheets: Array<sheetT>, className: string) {\n  let html = \"\";\n  for (let i = 0; i < sheets.length; i++) {\n    const sheet = sheets[i];\n    const {class: originalClassName, ...rest} = sheet.attrs;\n    const attrs = {\n      class: originalClassName\n        ? `${className} ${originalClassName}`\n        : className,\n      ...(rest as attrsT),\n    };\n    html += `<style${attrsToString(attrs)}>${sheet.css}</style>`;\n  }\n  return html;\n}\n\nfunction attrsToString(attrs: attrsT) {\n  let result = \"\";\n  for (const attr in attrs) {\n    const value = attrs[attr];\n    if (value === true) {\n      result += \" \" + attr;\n    } else if (value !== false) {\n      result += ` ${attr}=\"${value}\"`;\n    }\n  }\n  return result;\n}\n\nfunction stringify(styleRules, sortedCacheKeys) {\n  let result = \"\";\n  sortedCacheKeys.forEach(cacheKey => {\n    const rules = styleRules[cacheKey];\n    if (cacheKey !== \"\") {\n      result += `@media ${cacheKey}{${rules}}`;\n    } else {\n      result += rules;\n    }\n  });\n  return result;\n}\n\nfunction sheetify(styleRules, sortedCacheKeys): Array<sheetT> {\n  if (sortedCacheKeys.length === 0) {\n    return [{css: \"\", attrs: {}}];\n  }\n  const sheets = [];\n  sortedCacheKeys.forEach(cacheKey => {\n    // omit media (cacheKey) attribute if empty\n    const attrs = cacheKey === \"\" ? {} : {media: cacheKey};\n    sheets.push({css: styleRules[cacheKey], attrs});\n  });\n  return sheets;\n}\n\nexport default StyletronServer;\n"]},"metadata":{},"sourceType":"module"}